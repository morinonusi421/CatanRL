# get feature系の関数　→ Catanをもとに状態をnumpyでかえす
# actioncotroller → ただのアクション番号を，Catanが認識できる辞書に変換する

#0 rollDice
#1 endTurn
#2~71 discard
#72~91 bankTrade
#92 buyDevCard
#93,94 useKnight,useRoadBuilder
#95~109 useYear
#110~114 useMonopoly
#115~345 moveThief
#346~576 buildRoad
#577~807 buildSettlement
#808~1038 buildCity
import itertools
from .Phase import *
import numpy as np
from .Catan import *
import torch

#vertexIndex 0~53
#roadIndex 54~125
#hexIndex 126~144

#cnn上のyとxから、六角形なのか頂点なのか辺なのか？とindexを取得できる
cnnyxToHveIndex = {
 (0,4) : ['v', 52] ,
 (0,5) : ['e', 51, 52] ,
 (0,6) : ['v', 51] ,
 (0,7) : ['e', 50, 51] ,
 (0,8) : ['v', 50] ,
 (0,9) : ['e', 50, 53] ,
 (0,10) : ['v', 53] ,
 (0,11) : ['e', 27, 53] ,
 (0,12) : ['v', 27] ,
 (0,13) : ['e', 26, 27] ,
 (0,14) : ['v', 26] ,
 (0,15) : ['e', 25, 26] ,
 (0,16) : ['v', 25] ,
 (1,4) : ['e', 48, 52] ,
 (1,6) : ['h', 17] ,
 (1,8) : ['e', 22, 50] ,
 (1,10) : ['h', 18] ,
 (1,12) : ['e', 8, 27] ,
 (1,14) : ['h', 7] ,
 (1,16) : ['e', 24, 25] ,
 (2,2) : ['v', 49] ,
 (2,3) : ['e', 48, 49] ,
 (2,4) : ['v', 48] ,
 (2,5) : ['e', 23, 48] ,
 (2,6) : ['v', 23] ,
 (2,7) : ['e', 22, 23] ,
 (2,8) : ['v', 22] ,
 (2,9) : ['e', 9, 22] ,
 (2,10) : ['v', 9] ,
 (2,11) : ['e', 8, 9] ,
 (2,12) : ['v', 8] ,
 (2,13) : ['e', 7, 8] ,
 (2,14) : ['v', 7] ,
 (2,15) : ['e', 7, 24] ,
 (2,16) : ['v', 24] ,
 (2,17) : ['e', 24, 29] ,
 (2,18) : ['v', 29] ,
 (3,2) : ['e', 45, 49] ,
 (3,4) : ['h', 16] ,
 (3,6) : ['e', 19, 23] ,
 (3,8) : ['h', 6] ,
 (3,10) : ['e', 2, 9] ,
 (3,12) : ['h', 1] ,
 (3,14) : ['e', 6, 7] ,
 (3,16) : ['h', 8] ,
 (3,18) : ['e', 28, 29] ,
 (4,0) : ['v', 46] ,
 (4,1) : ['e', 45, 46] ,
 (4,2) : ['v', 45] ,
 (4,3) : ['e', 20, 45] ,
 (4,4) : ['v', 20] ,
 (4,5) : ['e', 19, 20] ,
 (4,6) : ['v', 19] ,
 (4,7) : ['e', 3, 19] ,
 (4,8) : ['v', 3] ,
 (4,9) : ['e', 2, 3] ,
 (4,10) : ['v', 2] ,
 (4,11) : ['e', 1, 2] ,
 (4,12) : ['v', 1] ,
 (4,13) : ['e', 1, 6] ,
 (4,14) : ['v', 6] ,
 (4,15) : ['e', 6, 11] ,
 (4,16) : ['v', 11] ,
 (4,17) : ['e', 11, 28] ,
 (4,18) : ['v', 28] ,
 (4,19) : ['e', 28, 31] ,
 (4,20) : ['v', 31] ,
 (5,0) : ['e', 46, 47] ,
 (5,2) : ['h', 15] ,
 (5,4) : ['e', 20, 21] ,
 (5,6) : ['h', 5] ,
 (5,8) : ['e', 3, 4] ,
 (5,10) : ['h', 0] ,
 (5,12) : ['e', 0, 1] ,
 (5,14) : ['h', 2] ,
 (5,16) : ['e', 10, 11] ,
 (5,18) : ['h', 9] ,
 (5,20) : ['e', 30, 31] ,
 (6,0) : ['v', 47] ,
 (6,1) : ['e', 43, 47] ,
 (6,2) : ['v', 43] ,
 (6,3) : ['e', 21, 43] ,
 (6,4) : ['v', 21] ,
 (6,5) : ['e', 16, 21] ,
 (6,6) : ['v', 16] ,
 (6,7) : ['e', 4, 16] ,
 (6,8) : ['v', 4] ,
 (6,9) : ['e', 4, 5] ,
 (6,10) : ['v', 5] ,
 (6,11) : ['e', 0, 5] ,
 (6,12) : ['v', 0] ,
 (6,13) : ['e', 0, 12] ,
 (6,14) : ['v', 12] ,
 (6,15) : ['e', 10, 12] ,
 (6,16) : ['v', 10] ,
 (6,17) : ['e', 10, 32] ,
 (6,18) : ['v', 32] ,
 (6,19) : ['e', 30, 32] ,
 (6,20) : ['v', 30] ,
 (7,2) : ['e', 43, 44] ,
 (7,4) : ['h', 14] ,
 (7,6) : ['e', 16, 17] ,
 (7,8) : ['h', 4] ,
 (7,10) : ['e', 5, 14] ,
 (7,12) : ['h', 3] ,
 (7,14) : ['e', 12, 13] ,
 (7,16) : ['h', 10] ,
 (7,18) : ['e', 32, 33] ,
 (8,2) : ['v', 44] ,
 (8,3) : ['e', 40, 44] ,
 (8,4) : ['v', 40] ,
 (8,5) : ['e', 17, 40] ,
 (8,6) : ['v', 17] ,
 (8,7) : ['e', 17, 18] ,
 (8,8) : ['v', 18] ,
 (8,9) : ['e', 14, 18] ,
 (8,10) : ['v', 14] ,
 (8,11) : ['e', 14, 15] ,
 (8,12) : ['v', 15] ,
 (8,13) : ['e', 13, 15] ,
 (8,14) : ['v', 13] ,
 (8,15) : ['e', 13, 34] ,
 (8,16) : ['v', 34] ,
 (8,17) : ['e', 33, 34] ,
 (8,18) : ['v', 33] ,
 (9,4) : ['e', 40, 41] ,
 (9,6) : ['h', 13] ,
 (9,8) : ['e', 18, 38] ,
 (9,10) : ['h', 12] ,
 (9,12) : ['e', 15, 36] ,
 (9,14) : ['h', 11] ,
 (9,16) : ['e', 34, 35] ,
 (10,4) : ['v', 41] ,
 (10,5) : ['e', 41, 42] ,
 (10,6) : ['v', 42] ,
 (10,7) : ['e', 38, 42] ,
 (10,8) : ['v', 38] ,
 (10,9) : ['e', 38, 39] ,
 (10,10) : ['v', 39] ,
 (10,11) : ['e', 36, 39] ,
 (10,12) : ['v', 36] ,
 (10,13) : ['e', 36, 37] ,
 (10,14) : ['v', 37] ,
 (10,15) : ['e', 35, 37] ,
 (10,16) : ['v', 35] 
}

#交差路二つのタプルから、街道のindex(勝手に決めたやつ)を取得
homo_vertex_index_to_edge_index = {(0, 1): 54, (1, 0): 54, (0, 5): 55, (5, 0): 55, (0, 12): 56, (12, 0): 56, (1, 2): 57, (2, 1): 57, (1, 6): 58, (6, 1): 58, (2, 3): 59, (3, 2): 59, (2, 9): 60, (9, 2): 60, (3, 4): 61, (4, 3): 61, (3, 19): 62, (19, 3): 62, (4, 5): 63, (5, 4): 63, (4, 16): 64, (16, 4): 64, (5, 14): 65, (14, 5): 65, (6, 7): 66, (7, 6): 66, (6, 11): 67, (11, 6): 67, (7, 8): 68, (8, 7): 68, (7, 24): 69, (24, 7): 69, (8, 9): 70, (9, 8): 70, (8, 27): 71, (27, 8): 71, (9, 22): 72, (22, 9): 72, (10, 11): 73, (11, 10): 73, (10, 12): 74, (12, 10): 74, (10, 32): 75, (32, 10): 75, (11, 28): 76, (28, 11): 76, (12, 13): 77, (13, 12): 77, (13, 15): 78, (15, 13): 78, (13, 34): 79, (34, 13): 79, (14, 15): 80, (15, 14): 80, (14, 18): 81, (18, 14): 81, (15, 36): 82, (36, 15): 82, (16, 17): 83, (17, 16): 83, (16, 21): 84, (21, 16): 84, (17, 18): 85, (18, 17): 85, (17, 40): 86, (40, 17): 86, (18, 38): 87, (38, 18): 87, (19, 20): 88, (20, 19): 88, (19, 23): 89, (23, 19): 89, (20, 21): 90, (21, 20): 90, (20, 45): 91, (45, 20): 91, (21, 43): 92, (43, 21): 92, (22, 23): 93, (23, 22): 93, (22, 50): 94, (50, 22): 94, (23, 48): 95, (48, 23): 95, (24, 25): 96, (25, 24): 96, (24, 29): 97, (29, 24): 97, (25, 26): 98, (26, 25): 98, (26, 27): 99, (27, 26): 99, (27, 53): 100, (53, 27): 100, (28, 29): 101, (29, 28): 101, (28, 31): 102, (31, 28): 102, (30, 31): 103, (31, 30): 103, (30, 32): 104, (32, 30): 104, (32, 33): 105, (33, 32): 105, (33, 34): 106, (34, 33): 106, (34, 35): 107, (35, 34): 107, (35, 37): 108, (37, 35): 108, (36, 37): 109, (37, 36): 109, (36, 39): 110, (39, 36): 110, (38, 39): 111, (39, 38): 111, (38, 42): 112, (42, 38): 112, (40, 41): 113, (41, 40): 113, (40, 44): 114, (44, 40): 114, (41, 42): 115, (42, 41): 115, (43, 44): 116, (44, 43): 116, (43, 47): 117, (47, 43): 117, (45, 46): 118, (46, 45): 118, (45, 49): 119, (49, 45): 119, (46, 47): 120, (47, 46): 120, (48, 49): 121, (49, 48): 121, (48, 52): 122, (52, 48): 122, (50, 51): 123, (51, 50): 123, (50, 53): 124, (53, 50): 124, (51, 52): 125, (52, 51): 125}
vertex_index_to_edge_index = {(0, 1): 0, (1, 0): 0, (0, 5): 1, (5, 0): 1, (0, 12): 2, (12, 0): 2, (1, 2): 3, (2, 1): 3, (1, 6): 4, (6, 1): 4, (2, 3): 5, (3, 2): 5, (2, 9): 6, (9, 2): 6, (3, 4): 7, (4, 3): 7, (3, 19): 8, (19, 3): 8, (4, 5): 9, (5, 4): 9, (4, 16): 10, (16, 4): 10, (5, 14): 11, (14, 5): 11, (6, 7): 12, (7, 6): 12, (6, 11): 13, (11, 6): 13, (7, 8): 14, (8, 7): 14, (7, 24): 15, (24, 7): 15, (8, 9): 16, (9, 8): 16, (8, 27): 17, (27, 8): 17, (9, 22): 18, (22, 9): 18, (10, 11): 19, (11, 10): 19, (10, 12): 20, (12, 10): 20, (10, 32): 21, (32, 10): 21, (11, 28): 22, (28, 11): 22, (12, 13): 23, (13, 12): 23, (13, 15): 24, (15, 13): 24, (13, 34): 25, (34, 13): 25, (14, 15): 26, (15, 14): 26, (14, 18): 27, (18, 14): 27, (15, 36): 28, (36, 15): 28, (16, 17): 29, (17, 16): 29, (16, 21): 30, (21, 16): 30, (17, 18): 31, (18, 17): 31, (17, 40): 32, (40, 17): 32, (18, 38): 33, (38, 18): 33, (19, 20): 34, (20, 19): 34, (19, 23): 35, (23, 19): 35, (20, 21): 36, (21, 20): 36, (20, 45): 37, (45, 20): 37, (21, 43): 38, (43, 21): 38, (22, 23): 39, (23, 22): 39, (22, 50): 40, (50, 22): 40, (23, 48): 41, (48, 23): 41, (24, 25): 42, (25, 24): 42, (24, 29): 43, (29, 24): 43, (25, 26): 44, (26, 25): 44, (26, 27): 45, (27, 26): 45, (27, 53): 46, (53, 27): 46, (28, 29): 47, (29, 28): 47, (28, 31): 48, (31, 28): 48, (30, 31): 49, (31, 30): 49, (30, 32): 50, (32, 30): 50, (32, 33): 51, (33, 32): 51, (33, 34): 52, (34, 33): 52, (34, 35): 53, (35, 34): 53, (35, 37): 54, (37, 35): 54, (36, 37): 55, (37, 36): 55, (36, 39): 56, (39, 36): 56, (38, 39): 57, (39, 38): 57, (38, 42): 58, (42, 38): 58, (40, 41): 59, (41, 40): 59, (40, 44): 60, (44, 40): 60, (41, 42): 61, (42, 41): 61, (43, 44): 62, (44, 43): 62, (43, 47): 63, (47, 43): 63, (45, 46): 64, (46, 45): 64, (45, 49): 65, (49, 45): 65, (46, 47): 66, (47, 46): 66, (48, 49): 67, (49, 48): 67, (48, 52): 68, (52, 48): 68, (50, 51): 69, (51, 50): 69, (50, 53): 70, (53, 50): 70, (51, 52): 71, (52, 51): 71}

homo_src = [140, 58, 16, 23, 24, 121, 144, 5, 28, 9, 17, 6, 26, 18, 64, 87, 56, 136, 2, 0, 86, 11, 82, 101, 133, 144, 45, 91, 83, 38, 49, 143, 15, 38, 124, 7, 86, 12, 20, 139, 109, 132, 129, 23, 68, 120, 24, 33, 13, 16, 45, 24, 5, 34, 112, 3, 60, 22, 46, 135, 143, 128, 136, 116, 139, 31, 53, 119, 44, 3, 112, 45, 37, 123, 38, 8, 50, 19, 108, 48, 4, 70, 129, 1, 134, 45, 41, 16, 79, 119, 63, 45, 5, 14, 22, 135, 115, 127, 74, 93, 7, 136, 139, 55, 59, 142, 97, 23, 52, 134, 10, 22, 37, 127, 26, 0, 9, 55, 67, 142, 44, 134, 131, 141, 63, 100, 144, 38, 18, 104, 135, 115, 127, 9, 93, 17, 85, 130, 40, 96, 138, 67, 59, 41, 25, 69, 111, 2, 13, 62, 15, 18, 127, 103, 48, 0, 114, 8, 28, 11, 48, 12, 6, 4, 118, 33, 14, 51, 131, 92, 2, 24, 40, 137, 126, 122, 17, 114, 17, 130, 40, 9, 88, 20, 32, 12, 141, 80, 133, 1, 43, 13, 7, 35, 144, 73, 47, 103, 0, 126, 122, 28, 138, 31, 77, 141, 32, 28, 84, 21, 27, 50, 11, 99, 3, 22, 133, 32, 141, 4, 133, 102, 137, 36, 38, 84, 126, 106, 139, 8, 109, 76, 0, 10, 68, 129, 19, 39, 132, 13, 98, 4, 71, 61, 82, 34, 43, 9, 110, 17, 28, 143, 72, 116, 49, 42, 129, 2, 57, 31, 42, 52, 132, 4, 35, 53, 36, 123, 75, 49, 46, 27, 128, 72, 136, 97, 20, 19, 0, 11, 129, 132, 23, 39, 98, 71, 90, 14, 9, 143, 14, 46, 135, 75, 105, 143, 64, 56, 78, 8, 57, 140, 32, 142, 132, 10, 37, 79, 60, 26, 135, 6, 27, 124, 18, 128, 18, 30, 12, 21, 89, 142, 34, 90, 131, 101, 22, 143, 85, 105, 136, 128, 108, 138, 40, 89, 132, 10, 111, 131, 25, 92, 53, 3, 127, 27, 36, 135, 74, 48, 128, 128, 30, 21, 118, 21, 33, 44, 34, 1, 142, 2, 34, 131, 104, 137, 19, 8, 11, 95, 11, 19, 6, 48, 40, 4, 78, 41, 25, 70, 52, 1, 141, 43, 13, 81, 15, 73, 62, 127, 36, 138, 66, 29, 107, 134, 39, 142, 77, 14, 22, 131, 32, 7, 81, 54, 15, 125, 18, 137, 5, 47, 130, 138, 130, 50, 138, 6, 99, 134, 100, 23, 51, 133, 141, 51, 16, 91, 36, 16, 94, 126, 21, 5, 29, 106, 66, 87, 130, 10, 96, 107, 76, 134, 140, 3, 12, 69, 20, 61, 113, 14, 43, 1, 102, 7, 54, 125, 137, 50, 130, 29, 65, 117, 65, 140, 121, 23, 35, 110, 94, 17, 24, 16, 6, 47, 95, 126, 5, 136, 42, 21, 139, 19, 2, 27, 10, 129, 117, 88, 140, 3, 12, 58, 144, 20, 113, 80, 133, 144, 83, 1, 137, 15, 15, 7, 126, 50, 20, 139, 30, 140, 8, 120, 13, 43]
homo_dst = [43, 1, 84, 132, 97, 48, 22, 65, 76, 72, 85, 66, 133, 138, 16, 18, 12, 32, 59, 126, 40, 135, 15, 28, 8, 8, 142, 20, 16, 112, 121, 48, 137, 139, 53, 133, 17, 77, 90, 41, 37, 2, 15, 95, 8, 46, 69, 136, 78, 83, 119, 96, 55, 137, 38, 131, 9, 144, 120, 30, 52, 0, 13, 44, 18, 103, 100, 45, 140, 126, 42, 141, 137, 51, 111, 70, 94, 88, 35, 142, 63, 8, 5, 57, 29, 91, 139, 64, 13, 49, 5, 118, 63, 130, 143, 11, 42, 7, 10, 23, 127, 12, 17, 5, 3, 19, 29, 89, 125, 24, 128, 93, 109, 2, 99, 56, 132, 0, 11, 23, 116, 28, 4, 45, 4, 53, 50, 87, 81, 32, 10, 41, 6, 127, 22, 140, 18, 17, 114, 24, 39, 6, 2, 115, 98, 24, 39, 132, 129, 3, 80, 85, 1, 31, 95, 55, 40, 68, 135, 73, 122, 56, 134, 61, 46, 106, 65, 123, 3, 21, 127, 133, 86, 37, 0, 48, 130, 44, 139, 16, 113, 144, 19, 131, 105, 136, 21, 14, 26, 126, 141, 137, 66, 137, 53, 11, 120, 30, 54, 4, 52, 134, 15, 135, 13, 43, 136, 102, 21, 90, 133, 144, 134, 27, 59, 72, 7, 104, 20, 131, 25, 28, 13, 110, 138, 16, 3, 34, 40, 133, 36, 11, 129, 75, 7, 14, 142, 111, 19, 77, 26, 126, 27, 4, 36, 136, 117, 70, 36, 83, 101, 51, 9, 43, 142, 112, 0, 57, 2, 102, 139, 143, 23, 130, 108, 144, 82, 50, 10, 119, 141, 100, 12, 22, 34, 24, 88, 132, 128, 128, 13, 9, 93, 110, 25, 8, 21, 129, 60, 23, 138, 118, 28, 32, 33, 50, 4, 0, 15, 127, 1, 17, 75, 45, 22, 136, 108, 34, 2, 98, 32, 58, 99, 50, 130, 11, 139, 104, 74, 141, 19, 49, 107, 20, 21, 29, 132, 22, 17, 32, 10, 6, 37, 38, 140, 23, 3, 135, 38, 16, 133, 43, 124, 132, 9, 71, 138, 31, 12, 121, 1, 10, 103, 131, 45, 140, 105, 114, 79, 54, 48, 126, 106, 20, 30, 36, 62, 71, 67, 48, 76, 89, 128, 143, 139, 64, 13, 113, 96, 9, 122, 58, 47, 140, 136, 14, 78, 10, 19, 8, 137, 14, 7, 134, 35, 7, 138, 20, 12, 81, 94, 19, 135, 69, 18, 1, 82, 52, 87, 35, 126, 141, 5, 18, 14, 143, 36, 127, 26, 11, 27, 143, 125, 24, 46, 143, 131, 45, 109, 140, 50, 2, 84, 130, 97, 33, 6, 38, 18, 74, 25, 34, 28, 6, 40, 62, 129, 7, 142, 3, 41, 80, 116, 128, 31, 68, 0, 51, 34, 124, 4, 101, 5, 43, 14, 44, 49, 142, 107, 39, 22, 86, 134, 130, 67, 117, 23, 1, 129, 33, 115, 92, 38, 131, 60, 144, 73, 12, 47, 20, 21, 61, 128, 6, 9, 141, 40, 15, 27, 27, 17, 127, 15, 129, 138, 134, 5, 123, 91, 42, 135, 16, 144, 47, 79, 92]
homo_edge_index = [homo_src,homo_dst]

#ヘテログラフで使う　タイルの接続関係
hextile_to_vertextile = [[0, 2, 3, 0, 1, 2, 0, 1, 6, 0, 5, 6, 0, 4, 5, 0, 3, 4, 1, 2, 8, 1, 7, 8, 1, 7, 18, 1, 6, 18, 2, 9, 10, 2, 8, 9, 2, 3, 10, 3, 10, 11, 3, 4, 12, 3, 11, 12, 4, 5, 14, 4, 13, 14, 4, 12, 13, 5, 6, 16, 5, 15, 16, 5, 14, 15, 6, 17, 18, 6, 16, 17, 7, 8, 7, 7, 7, 18, 8, 9, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 11, 12, 13, 12, 13, 14, 13, 13, 14, 15, 14, 15, 16, 15, 15, 16, 17, 16, 17, 18, 17, 17, 18], [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 25, 26, 27, 27, 28, 28, 29, 30, 31, 32, 32, 33, 34, 34, 35, 36, 36, 37, 38, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 45, 46, 47, 48, 48, 49, 50, 50, 51, 52, 53]]
vertextile_to_hextile = [[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 25, 26, 27, 27, 28, 28, 29, 30, 31, 32, 32, 33, 34, 34, 35, 36, 36, 37, 38, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 45, 46, 47, 48, 48, 49, 50, 50, 51, 52, 53], [0, 2, 3, 0, 1, 2, 0, 1, 6, 0, 5, 6, 0, 4, 5, 0, 3, 4, 1, 2, 8, 1, 7, 8, 1, 7, 18, 1, 6, 18, 2, 9, 10, 2, 8, 9, 2, 3, 10, 3, 10, 11, 3, 4, 12, 3, 11, 12, 4, 5, 14, 4, 13, 14, 4, 12, 13, 5, 6, 16, 5, 15, 16, 5, 14, 15, 6, 17, 18, 6, 16, 17, 7, 8, 7, 7, 7, 18, 8, 9, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 11, 12, 13, 12, 13, 14, 13, 13, 14, 15, 14, 15, 16, 15, 15, 16, 17, 16, 17, 18, 17, 17, 18]]
roadtile_to_vertextile = [[0, 1, 2, 0, 3, 4, 3, 5, 6, 5, 7, 8, 7, 9, 10, 1, 9, 11, 4, 12, 13, 12, 14, 15, 14, 16, 17, 6, 16, 18, 19, 20, 21, 13, 19, 22, 2, 20, 23, 23, 24, 25, 11, 26, 27, 24, 26, 28, 10, 29, 30, 29, 31, 32, 27, 31, 33, 8, 34, 35, 34, 36, 37, 30, 36, 38, 18, 39, 40, 35, 39, 41, 15, 42, 43, 42, 44, 44, 45, 17, 45, 46, 22, 47, 48, 43, 47, 49, 50, 48, 49, 21, 50, 51, 51, 52, 25, 52, 53, 53, 54, 28, 55, 56, 54, 55, 33, 57, 58, 56, 57, 32, 59, 60, 59, 61, 58, 61, 38, 62, 63, 60, 62, 37, 64, 65, 64, 66, 63, 66, 41, 67, 68, 65, 67, 40, 69, 70, 69, 71, 68, 71, 46, 70], [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 53, 53]]
vertextile_to_roadtile = [[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 53, 53], [0, 1, 2, 0, 3, 4, 3, 5, 6, 5, 7, 8, 7, 9, 10, 1, 9, 11, 4, 12, 13, 12, 14, 15, 14, 16, 17, 6, 16, 18, 19, 20, 21, 13, 19, 22, 2, 20, 23, 23, 24, 25, 11, 26, 27, 24, 26, 28, 10, 29, 30, 29, 31, 32, 27, 31, 33, 8, 34, 35, 34, 36, 37, 30, 36, 38, 18, 39, 40, 35, 39, 41, 15, 42, 43, 42, 44, 44, 45, 17, 45, 46, 22, 47, 48, 43, 47, 49, 50, 48, 49, 21, 50, 51, 51, 52, 25, 52, 53, 53, 54, 28, 55, 56, 54, 55, 33, 57, 58, 56, 57, 32, 59, 60, 59, 61, 58, 61, 38, 62, 63, 60, 62, 37, 64, 65, 64, 66, 63, 66, 41, 67, 68, 65, 67, 40, 69, 70, 69, 71, 68, 71, 46, 70]]

vertextile_ro_vertextile = [[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 43, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 53, 53], [1, 5, 12, 0, 2, 6, 1, 3, 9, 2, 4, 19, 3, 5, 16, 0, 4, 14, 1, 7, 11, 6, 8, 24, 7, 9, 27, 2, 8, 22, 11, 12, 32, 6, 10, 28, 0, 10, 13, 12, 15, 34, 5, 15, 18, 13, 14, 36, 4, 17, 21, 16, 18, 40, 14, 17, 38, 3, 20, 23, 19, 21, 45, 16, 20, 43, 9, 23, 50, 19, 22, 48, 7, 25, 29, 24, 26, 25, 27, 8, 26, 53, 11, 29, 31, 24, 28, 31, 32, 28, 30, 10, 30, 33, 32, 34, 13, 33, 35, 34, 37, 15, 37, 39, 35, 36, 18, 39, 42, 36, 38, 17, 41, 44, 40, 42, 38, 41, 21, 44, 47, 40, 43, 20, 46, 49, 45, 47, 43, 46, 23, 49, 52, 45, 48, 22, 51, 53, 50, 52, 48, 51, 27, 50]]
roadtile_to_roadtile = [[0, 1, 0, 2, 1, 2, 0, 3, 0, 4, 3, 4, 3, 5, 3, 6, 5, 6, 5, 7, 5, 8, 7, 8, 7, 9, 7, 10, 9, 10, 1, 9, 1, 11, 9, 11, 4, 12, 4, 13, 12, 13, 12, 14, 12, 15, 14, 15, 14, 16, 14, 17, 16, 17, 6, 16, 6, 18, 16, 18, 19, 20, 19, 21, 20, 21, 13, 19, 13, 22, 19, 22, 2, 20, 2, 23, 20, 23, 23, 24, 23, 25, 24, 25, 11, 26, 11, 27, 26, 27, 24, 26, 24, 28, 26, 28, 10, 29, 10, 30, 29, 30, 29, 31, 29, 32, 31, 32, 27, 31, 27, 33, 31, 33, 8, 34, 8, 35, 34, 35, 34, 36, 34, 37, 36, 37, 30, 36, 30, 38, 36, 38, 18, 39, 18, 40, 39, 40, 35, 39, 35, 41, 39, 41, 15, 42, 15, 43, 42, 43, 42, 44, 44, 45, 17, 45, 17, 46, 45, 46, 22, 47, 22, 48, 47, 48, 43, 47, 49, 50, 48, 49, 21, 50, 21, 51, 50, 51, 51, 52, 25, 52, 25, 53, 52, 53, 53, 54, 28, 55, 28, 56, 55, 56, 54, 55, 33, 57, 33, 58, 57, 58, 56, 57, 32, 59, 32, 60, 59, 60, 59, 61, 58, 61, 38, 62, 38, 63, 62, 63, 60, 62, 37, 64, 37, 65, 64, 65, 64, 66, 63, 66, 41, 67, 41, 68, 67, 68, 65, 67, 40, 69, 40, 70, 69, 70, 69, 71, 68, 71, 46, 70], [1, 0, 2, 0, 2, 1, 3, 0, 4, 0, 4, 3, 5, 3, 6, 3, 6, 5, 7, 5, 8, 5, 8, 7, 9, 7, 10, 7, 10, 9, 9, 1, 11, 1, 11, 9, 12, 4, 13, 4, 13, 12, 14, 12, 15, 12, 15, 14, 16, 14, 17, 14, 17, 16, 16, 6, 18, 6, 18, 16, 20, 19, 21, 19, 21, 20, 19, 13, 22, 13, 22, 19, 20, 2, 23, 2, 23, 20, 24, 23, 25, 23, 25, 24, 26, 11, 27, 11, 27, 26, 26, 24, 28, 24, 28, 26, 29, 10, 30, 10, 30, 29, 31, 29, 32, 29, 32, 31, 31, 27, 33, 27, 33, 31, 34, 8, 35, 8, 35, 34, 36, 34, 37, 34, 37, 36, 36, 30, 38, 30, 38, 36, 39, 18, 40, 18, 40, 39, 39, 35, 41, 35, 41, 39, 42, 15, 43, 15, 43, 42, 44, 42, 45, 44, 45, 17, 46, 17, 46, 45, 47, 22, 48, 22, 48, 47, 47, 43, 50, 49, 49, 48, 50, 21, 51, 21, 51, 50, 52, 51, 52, 25, 53, 25, 53, 52, 54, 53, 55, 28, 56, 28, 56, 55, 55, 54, 57, 33, 58, 33, 58, 57, 57, 56, 59, 32, 60, 32, 60, 59, 61, 59, 61, 58, 62, 38, 63, 38, 63, 62, 62, 60, 64, 37, 65, 37, 65, 64, 66, 64, 66, 63, 67, 41, 68, 41, 68, 67, 67, 65, 69, 40, 70, 40, 70, 69, 71, 69, 71, 68, 70, 46]]
use_cuda = torch.cuda.is_available()
device = torch.device("cuda" if use_cuda else "cpu")

#actionInfo→アクション番号の逆引き
reverse_actionController = {"{'name': 'rollDice'}": 0, "{'name': 'endTurn'}": 1, "{'name': 'discard', 'saveResources': {'ORE': 4, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 2, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 3, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 4, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 5, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 6, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 7, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 8, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 9, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 10, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 11, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 12, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 13, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 14, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 15, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 16, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 3, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 17, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 2, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 18, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 19, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 20, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 21, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 22, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 23, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 24, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 25, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 26, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 3, 'WOOD': 0, 'SHEEP': 0}}": 27, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 1, 'SHEEP': 0}}": 28, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 1}}": 29, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 2, 'SHEEP': 0}}": 30, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 1}}": 31, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 2}}": 32, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 3, 'SHEEP': 0}}": 33, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 1}}": 34, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 2}}": 35, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 3}}": 36, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 4, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 37, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 3, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 38, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 3, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 39, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 3, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 40, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 41, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 42, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 43, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 44, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 45, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 46, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 3, 'WOOD': 0, 'SHEEP': 0}}": 47, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 2, 'WOOD': 1, 'SHEEP': 0}}": 48, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 1}}": 49, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 2, 'SHEEP': 0}}": 50, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 1}}": 51, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 2}}": 52, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 3, 'SHEEP': 0}}": 53, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 1}}": 54, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 2}}": 55, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 3}}": 56, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 4, 'WOOD': 0, 'SHEEP': 0}}": 57, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 3, 'WOOD': 1, 'SHEEP': 0}}": 58, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 3, 'WOOD': 0, 'SHEEP': 1}}": 59, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 2, 'SHEEP': 0}}": 60, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 1, 'SHEEP': 1}}": 61, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 2}}": 62, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 3, 'SHEEP': 0}}": 63, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 2, 'SHEEP': 1}}": 64, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 2}}": 65, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 3}}": 66, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 4, 'SHEEP': 0}}": 67, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 3, 'SHEEP': 1}}": 68, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 2}}": 69, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 3}}": 70, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 4}}": 71, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'BRICK'}": 72, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'WHEAT'}": 73, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'WOOD'}": 74, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'SHEEP'}": 75, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'ORE'}": 76, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'WHEAT'}": 77, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'WOOD'}": 78, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'SHEEP'}": 79, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'ORE'}": 80, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'BRICK'}": 81, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'WOOD'}": 82, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'SHEEP'}": 83, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'ORE'}": 84, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'BRICK'}": 85, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'WHEAT'}": 86, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'SHEEP'}": 87, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'ORE'}": 88, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'BRICK'}": 89, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'WHEAT'}": 90, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'WOOD'}": 91, "{'name': 'buyDevCard'}": 92, "{'name': 'useKnight'}": 93, "{'name': 'useRoadBuilder'}": 94, "{'name': 'useYear', 'getResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 95, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 96, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 97, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 98, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 99, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 100, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 101, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 102, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 103, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 104, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 105, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 106, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 107, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 108, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 109, "{'name': 'useMonopoly', 'resource': 'ORE'}": 110, "{'name': 'useMonopoly', 'resource': 'BRICK'}": 111, "{'name': 'useMonopoly', 'resource': 'WHEAT'}": 112, "{'name': 'useMonopoly', 'resource': 'WOOD'}": 113, "{'name': 'useMonopoly', 'resource': 'SHEEP'}": 114, "{'name': 'moveThief', 'hexIndex': 17}": 142, "{'name': 'moveThief', 'hexIndex': 18}": 146, "{'name': 'moveThief', 'hexIndex': 7}": 150, "{'name': 'moveThief', 'hexIndex': 16}": 182, "{'name': 'moveThief', 'hexIndex': 6}": 186, "{'name': 'moveThief', 'hexIndex': 1}": 190, "{'name': 'moveThief', 'hexIndex': 8}": 194, "{'name': 'moveThief', 'hexIndex': 15}": 222, "{'name': 'moveThief', 'hexIndex': 5}": 226, "{'name': 'moveThief', 'hexIndex': 0}": 230, "{'name': 'moveThief', 'hexIndex': 2}": 234, "{'name': 'moveThief', 'hexIndex': 9}": 238, "{'name': 'moveThief', 'hexIndex': 14}": 266, "{'name': 'moveThief', 'hexIndex': 4}": 270, "{'name': 'moveThief', 'hexIndex': 3}": 274, "{'name': 'moveThief', 'hexIndex': 10}": 278, "{'name': 'moveThief', 'hexIndex': 13}": 310, "{'name': 'moveThief', 'hexIndex': 12}": 314, "{'name': 'moveThief', 'hexIndex': 11}": 318, "{'name': 'buildRoad', 'v1': 51, 'v2': 52}": 351, "{'name': 'buildRoad', 'v1': 50, 'v2': 51}": 353, "{'name': 'buildRoad', 'v1': 50, 'v2': 53}": 355, "{'name': 'buildRoad', 'v1': 27, 'v2': 53}": 357, "{'name': 'buildRoad', 'v1': 26, 'v2': 27}": 359, "{'name': 'buildRoad', 'v1': 25, 'v2': 26}": 361, "{'name': 'buildRoad', 'v1': 48, 'v2': 52}": 371, "{'name': 'buildRoad', 'v1': 22, 'v2': 50}": 375, "{'name': 'buildRoad', 'v1': 8, 'v2': 27}": 379, "{'name': 'buildRoad', 'v1': 24, 'v2': 25}": 383, "{'name': 'buildRoad', 'v1': 48, 'v2': 49}": 391, "{'name': 'buildRoad', 'v1': 23, 'v2': 48}": 393, "{'name': 'buildRoad', 'v1': 22, 'v2': 23}": 395, "{'name': 'buildRoad', 'v1': 9, 'v2': 22}": 397, "{'name': 'buildRoad', 'v1': 8, 'v2': 9}": 399, "{'name': 'buildRoad', 'v1': 7, 'v2': 8}": 401, "{'name': 'buildRoad', 'v1': 7, 'v2': 24}": 403, "{'name': 'buildRoad', 'v1': 24, 'v2': 29}": 405, "{'name': 'buildRoad', 'v1': 45, 'v2': 49}": 411, "{'name': 'buildRoad', 'v1': 19, 'v2': 23}": 415, "{'name': 'buildRoad', 'v1': 2, 'v2': 9}": 419, "{'name': 'buildRoad', 'v1': 6, 'v2': 7}": 423, "{'name': 'buildRoad', 'v1': 28, 'v2': 29}": 427, "{'name': 'buildRoad', 'v1': 45, 'v2': 46}": 431, "{'name': 'buildRoad', 'v1': 20, 'v2': 45}": 433, "{'name': 'buildRoad', 'v1': 19, 'v2': 20}": 435, "{'name': 'buildRoad', 'v1': 3, 'v2': 19}": 437, "{'name': 'buildRoad', 'v1': 2, 'v2': 3}": 439, "{'name': 'buildRoad', 'v1': 1, 'v2': 2}": 441, "{'name': 'buildRoad', 'v1': 1, 'v2': 6}": 443, "{'name': 'buildRoad', 'v1': 6, 'v2': 11}": 445, "{'name': 'buildRoad', 'v1': 11, 'v2': 28}": 447, "{'name': 'buildRoad', 'v1': 28, 'v2': 31}": 449, "{'name': 'buildRoad', 'v1': 46, 'v2': 47}": 451, "{'name': 'buildRoad', 'v1': 20, 'v2': 21}": 455, "{'name': 'buildRoad', 'v1': 3, 'v2': 4}": 459, "{'name': 'buildRoad', 'v1': 0, 'v2': 1}": 463, "{'name': 'buildRoad', 'v1': 10, 'v2': 11}": 467, "{'name': 'buildRoad', 'v1': 30, 'v2': 31}": 471, "{'name': 'buildRoad', 'v1': 43, 'v2': 47}": 473, "{'name': 'buildRoad', 'v1': 21, 'v2': 43}": 475, "{'name': 'buildRoad', 'v1': 16, 'v2': 21}": 477, "{'name': 'buildRoad', 'v1': 4, 'v2': 16}": 479, "{'name': 'buildRoad', 'v1': 4, 'v2': 5}": 481, "{'name': 'buildRoad', 'v1': 0, 'v2': 5}": 483, "{'name': 'buildRoad', 'v1': 0, 'v2': 12}": 485, "{'name': 'buildRoad', 'v1': 10, 'v2': 12}": 487, "{'name': 'buildRoad', 'v1': 10, 'v2': 32}": 489, "{'name': 'buildRoad', 'v1': 30, 'v2': 32}": 491, "{'name': 'buildRoad', 'v1': 43, 'v2': 44}": 495, "{'name': 'buildRoad', 'v1': 16, 'v2': 17}": 499, "{'name': 'buildRoad', 'v1': 5, 'v2': 14}": 503, "{'name': 'buildRoad', 'v1': 12, 'v2': 13}": 507, "{'name': 'buildRoad', 'v1': 32, 'v2': 33}": 511, "{'name': 'buildRoad', 'v1': 40, 'v2': 44}": 517, "{'name': 'buildRoad', 'v1': 17, 'v2': 40}": 519, "{'name': 'buildRoad', 'v1': 17, 'v2': 18}": 521, "{'name': 'buildRoad', 'v1': 14, 'v2': 18}": 523, "{'name': 'buildRoad', 'v1': 14, 'v2': 15}": 525, "{'name': 'buildRoad', 'v1': 13, 'v2': 15}": 527, "{'name': 'buildRoad', 'v1': 13, 'v2': 34}": 529, "{'name': 'buildRoad', 'v1': 33, 'v2': 34}": 531, "{'name': 'buildRoad', 'v1': 40, 'v2': 41}": 539, "{'name': 'buildRoad', 'v1': 18, 'v2': 38}": 543, "{'name': 'buildRoad', 'v1': 15, 'v2': 36}": 547, "{'name': 'buildRoad', 'v1': 34, 'v2': 35}": 551, "{'name': 'buildRoad', 'v1': 41, 'v2': 42}": 561, "{'name': 'buildRoad', 'v1': 38, 'v2': 42}": 563, "{'name': 'buildRoad', 'v1': 38, 'v2': 39}": 565, "{'name': 'buildRoad', 'v1': 36, 'v2': 39}": 567, "{'name': 'buildRoad', 'v1': 36, 'v2': 37}": 569, "{'name': 'buildRoad', 'v1': 35, 'v2': 37}": 571, "{'name': 'buildSettlement', 'v': 52}": 581, "{'name': 'buildSettlement', 'v': 51}": 583, "{'name': 'buildSettlement', 'v': 50}": 585, "{'name': 'buildSettlement', 'v': 53}": 587, "{'name': 'buildSettlement', 'v': 27}": 589, "{'name': 'buildSettlement', 'v': 26}": 591, "{'name': 'buildSettlement', 'v': 25}": 593, "{'name': 'buildSettlement', 'v': 49}": 621, "{'name': 'buildSettlement', 'v': 48}": 623, "{'name': 'buildSettlement', 'v': 23}": 625, "{'name': 'buildSettlement', 'v': 22}": 627, "{'name': 'buildSettlement', 'v': 9}": 629, "{'name': 'buildSettlement', 'v': 8}": 631, "{'name': 'buildSettlement', 'v': 7}": 633, "{'name': 'buildSettlement', 'v': 24}": 635, "{'name': 'buildSettlement', 'v': 29}": 637, "{'name': 'buildSettlement', 'v': 46}": 661, "{'name': 'buildSettlement', 'v': 45}": 663, "{'name': 'buildSettlement', 'v': 20}": 665, "{'name': 'buildSettlement', 'v': 19}": 667, "{'name': 'buildSettlement', 'v': 3}": 669, "{'name': 'buildSettlement', 'v': 2}": 671, "{'name': 'buildSettlement', 'v': 1}": 673, "{'name': 'buildSettlement', 'v': 6}": 675, "{'name': 'buildSettlement', 'v': 11}": 677, "{'name': 'buildSettlement', 'v': 28}": 679, "{'name': 'buildSettlement', 'v': 31}": 681, "{'name': 'buildSettlement', 'v': 47}": 703, "{'name': 'buildSettlement', 'v': 43}": 705, "{'name': 'buildSettlement', 'v': 21}": 707, "{'name': 'buildSettlement', 'v': 16}": 709, "{'name': 'buildSettlement', 'v': 4}": 711, "{'name': 'buildSettlement', 'v': 5}": 713, "{'name': 'buildSettlement', 'v': 0}": 715, "{'name': 'buildSettlement', 'v': 12}": 717, "{'name': 'buildSettlement', 'v': 10}": 719, "{'name': 'buildSettlement', 'v': 32}": 721, "{'name': 'buildSettlement', 'v': 30}": 723, "{'name': 'buildSettlement', 'v': 44}": 747, "{'name': 'buildSettlement', 'v': 40}": 749, "{'name': 'buildSettlement', 'v': 17}": 751, "{'name': 'buildSettlement', 'v': 18}": 753, "{'name': 'buildSettlement', 'v': 14}": 755, "{'name': 'buildSettlement', 'v': 15}": 757, "{'name': 'buildSettlement', 'v': 13}": 759, "{'name': 'buildSettlement', 'v': 34}": 761, "{'name': 'buildSettlement', 'v': 33}": 763, "{'name': 'buildSettlement', 'v': 41}": 791, "{'name': 'buildSettlement', 'v': 42}": 793, "{'name': 'buildSettlement', 'v': 38}": 795, "{'name': 'buildSettlement', 'v': 39}": 797, "{'name': 'buildSettlement', 'v': 36}": 799, "{'name': 'buildSettlement', 'v': 37}": 801, "{'name': 'buildSettlement', 'v': 35}": 803, "{'name': 'buildCity', 'v': 52}": 812, "{'name': 'buildCity', 'v': 51}": 814, "{'name': 'buildCity', 'v': 50}": 816, "{'name': 'buildCity', 'v': 53}": 818, "{'name': 'buildCity', 'v': 27}": 820, "{'name': 'buildCity', 'v': 26}": 822, "{'name': 'buildCity', 'v': 25}": 824, "{'name': 'buildCity', 'v': 49}": 852, "{'name': 'buildCity', 'v': 48}": 854, "{'name': 'buildCity', 'v': 23}": 856, "{'name': 'buildCity', 'v': 22}": 858, "{'name': 'buildCity', 'v': 9}": 860, "{'name': 'buildCity', 'v': 8}": 862, "{'name': 'buildCity', 'v': 7}": 864, "{'name': 'buildCity', 'v': 24}": 866, "{'name': 'buildCity', 'v': 29}": 868, "{'name': 'buildCity', 'v': 46}": 892, "{'name': 'buildCity', 'v': 45}": 894, "{'name': 'buildCity', 'v': 20}": 896, "{'name': 'buildCity', 'v': 19}": 898, "{'name': 'buildCity', 'v': 3}": 900, "{'name': 'buildCity', 'v': 2}": 902, "{'name': 'buildCity', 'v': 1}": 904, "{'name': 'buildCity', 'v': 6}": 906, "{'name': 'buildCity', 'v': 11}": 908, "{'name': 'buildCity', 'v': 28}": 910, "{'name': 'buildCity', 'v': 31}": 912, "{'name': 'buildCity', 'v': 47}": 934, "{'name': 'buildCity', 'v': 43}": 936, "{'name': 'buildCity', 'v': 21}": 938, "{'name': 'buildCity', 'v': 16}": 940, "{'name': 'buildCity', 'v': 4}": 942, "{'name': 'buildCity', 'v': 5}": 944, "{'name': 'buildCity', 'v': 0}": 946, "{'name': 'buildCity', 'v': 12}": 948, "{'name': 'buildCity', 'v': 10}": 950, "{'name': 'buildCity', 'v': 32}": 952, "{'name': 'buildCity', 'v': 30}": 954, "{'name': 'buildCity', 'v': 44}": 978, "{'name': 'buildCity', 'v': 40}": 980, "{'name': 'buildCity', 'v': 17}": 982, "{'name': 'buildCity', 'v': 18}": 984, "{'name': 'buildCity', 'v': 14}": 986, "{'name': 'buildCity', 'v': 15}": 988, "{'name': 'buildCity', 'v': 13}": 990, "{'name': 'buildCity', 'v': 34}": 992, "{'name': 'buildCity', 'v': 33}": 994, "{'name': 'buildCity', 'v': 41}": 1022, "{'name': 'buildCity', 'v': 42}": 1024, "{'name': 'buildCity', 'v': 38}": 1026, "{'name': 'buildCity', 'v': 39}": 1028, "{'name': 'buildCity', 'v': 36}": 1030, "{'name': 'buildCity', 'v': 37}": 1032, "{'name': 'buildCity', 'v': 35}": 1034}
reverse_actionControllerGraph = {"{'name': 'rollDice'}": 0, "{'name': 'endTurn'}": 1, "{'name': 'discard', 'saveResources': {'ORE': 4, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 2, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 3, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 4, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 5, "{'name': 'discard', 'saveResources': {'ORE': 3, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 6, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 7, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 8, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 9, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 10, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 11, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 12, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 13, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 14, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 15, "{'name': 'discard', 'saveResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 16, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 3, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 17, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 2, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 18, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 19, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 20, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 21, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 22, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 23, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 24, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 25, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 26, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 3, 'WOOD': 0, 'SHEEP': 0}}": 27, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 1, 'SHEEP': 0}}": 28, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 1}}": 29, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 2, 'SHEEP': 0}}": 30, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 1}}": 31, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 2}}": 32, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 3, 'SHEEP': 0}}": 33, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 1}}": 34, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 2}}": 35, "{'name': 'discard', 'saveResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 3}}": 36, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 4, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 37, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 3, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 38, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 3, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 39, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 3, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 40, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 41, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 42, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 43, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 44, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 45, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 46, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 3, 'WOOD': 0, 'SHEEP': 0}}": 47, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 2, 'WOOD': 1, 'SHEEP': 0}}": 48, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 1}}": 49, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 2, 'SHEEP': 0}}": 50, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 1}}": 51, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 2}}": 52, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 3, 'SHEEP': 0}}": 53, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 1}}": 54, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 2}}": 55, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 3}}": 56, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 4, 'WOOD': 0, 'SHEEP': 0}}": 57, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 3, 'WOOD': 1, 'SHEEP': 0}}": 58, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 3, 'WOOD': 0, 'SHEEP': 1}}": 59, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 2, 'SHEEP': 0}}": 60, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 1, 'SHEEP': 1}}": 61, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 2}}": 62, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 3, 'SHEEP': 0}}": 63, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 2, 'SHEEP': 1}}": 64, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 2}}": 65, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 3}}": 66, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 4, 'SHEEP': 0}}": 67, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 3, 'SHEEP': 1}}": 68, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 2}}": 69, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 3}}": 70, "{'name': 'discard', 'saveResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 4}}": 71, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'BRICK'}": 72, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'WHEAT'}": 73, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'WOOD'}": 74, "{'name': 'bankTrade', 'buyResource': 'ORE', 'sellResource': 'SHEEP'}": 75, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'ORE'}": 76, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'WHEAT'}": 77, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'WOOD'}": 78, "{'name': 'bankTrade', 'buyResource': 'BRICK', 'sellResource': 'SHEEP'}": 79, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'ORE'}": 80, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'BRICK'}": 81, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'WOOD'}": 82, "{'name': 'bankTrade', 'buyResource': 'WHEAT', 'sellResource': 'SHEEP'}": 83, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'ORE'}": 84, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'BRICK'}": 85, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'WHEAT'}": 86, "{'name': 'bankTrade', 'buyResource': 'WOOD', 'sellResource': 'SHEEP'}": 87, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'ORE'}": 88, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'BRICK'}": 89, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'WHEAT'}": 90, "{'name': 'bankTrade', 'buyResource': 'SHEEP', 'sellResource': 'WOOD'}": 91, "{'name': 'buyDevCard'}": 92, "{'name': 'useKnight'}": 93, "{'name': 'useRoadBuilder'}": 94, "{'name': 'useYear', 'getResources': {'ORE': 2, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 95, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 96, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 97, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 98, "{'name': 'useYear', 'getResources': {'ORE': 1, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 99, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 2, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 0}}": 100, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 0}}": 101, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 0}}": 102, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 1, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 1}}": 103, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 2, 'WOOD': 0, 'SHEEP': 0}}": 104, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 1, 'SHEEP': 0}}": 105, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 1, 'WOOD': 0, 'SHEEP': 1}}": 106, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 2, 'SHEEP': 0}}": 107, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 1, 'SHEEP': 1}}": 108, "{'name': 'useYear', 'getResources': {'ORE': 0, 'BRICK': 0, 'WHEAT': 0, 'WOOD': 0, 'SHEEP': 2}}": 109, "{'name': 'useMonopoly', 'resource': 'ORE'}": 110, "{'name': 'useMonopoly', 'resource': 'BRICK'}": 111, "{'name': 'useMonopoly', 'resource': 'WHEAT'}": 112, "{'name': 'useMonopoly', 'resource': 'WOOD'}": 113, "{'name': 'useMonopoly', 'resource': 'SHEEP'}": 114, "{'name': 'moveThief', 'hexIndex': 0}": 115, "{'name': 'moveThief', 'hexIndex': 1}": 116, "{'name': 'moveThief', 'hexIndex': 2}": 117, "{'name': 'moveThief', 'hexIndex': 3}": 118, "{'name': 'moveThief', 'hexIndex': 4}": 119, "{'name': 'moveThief', 'hexIndex': 5}": 120, "{'name': 'moveThief', 'hexIndex': 6}": 121, "{'name': 'moveThief', 'hexIndex': 7}": 122, "{'name': 'moveThief', 'hexIndex': 8}": 123, "{'name': 'moveThief', 'hexIndex': 9}": 124, "{'name': 'moveThief', 'hexIndex': 10}": 125, "{'name': 'moveThief', 'hexIndex': 11}": 126, "{'name': 'moveThief', 'hexIndex': 12}": 127, "{'name': 'moveThief', 'hexIndex': 13}": 128, "{'name': 'moveThief', 'hexIndex': 14}": 129, "{'name': 'moveThief', 'hexIndex': 15}": 130, "{'name': 'moveThief', 'hexIndex': 16}": 131, "{'name': 'moveThief', 'hexIndex': 17}": 132, "{'name': 'moveThief', 'hexIndex': 18}": 133, "{'name': 'buildSettlement', 'v': 0}": 134, "{'name': 'buildSettlement', 'v': 1}": 135, "{'name': 'buildSettlement', 'v': 2}": 136, "{'name': 'buildSettlement', 'v': 3}": 137, "{'name': 'buildSettlement', 'v': 4}": 138, "{'name': 'buildSettlement', 'v': 5}": 139, "{'name': 'buildSettlement', 'v': 6}": 140, "{'name': 'buildSettlement', 'v': 7}": 141, "{'name': 'buildSettlement', 'v': 8}": 142, "{'name': 'buildSettlement', 'v': 9}": 143, "{'name': 'buildSettlement', 'v': 10}": 144, "{'name': 'buildSettlement', 'v': 11}": 145, "{'name': 'buildSettlement', 'v': 12}": 146, "{'name': 'buildSettlement', 'v': 13}": 147, "{'name': 'buildSettlement', 'v': 14}": 148, "{'name': 'buildSettlement', 'v': 15}": 149, "{'name': 'buildSettlement', 'v': 16}": 150, "{'name': 'buildSettlement', 'v': 17}": 151, "{'name': 'buildSettlement', 'v': 18}": 152, "{'name': 'buildSettlement', 'v': 19}": 153, "{'name': 'buildSettlement', 'v': 20}": 154, "{'name': 'buildSettlement', 'v': 21}": 155, "{'name': 'buildSettlement', 'v': 22}": 156, "{'name': 'buildSettlement', 'v': 23}": 157, "{'name': 'buildSettlement', 'v': 24}": 158, "{'name': 'buildSettlement', 'v': 25}": 159, "{'name': 'buildSettlement', 'v': 26}": 160, "{'name': 'buildSettlement', 'v': 27}": 161, "{'name': 'buildSettlement', 'v': 28}": 162, "{'name': 'buildSettlement', 'v': 29}": 163, "{'name': 'buildSettlement', 'v': 30}": 164, "{'name': 'buildSettlement', 'v': 31}": 165, "{'name': 'buildSettlement', 'v': 32}": 166, "{'name': 'buildSettlement', 'v': 33}": 167, "{'name': 'buildSettlement', 'v': 34}": 168, "{'name': 'buildSettlement', 'v': 35}": 169, "{'name': 'buildSettlement', 'v': 36}": 170, "{'name': 'buildSettlement', 'v': 37}": 171, "{'name': 'buildSettlement', 'v': 38}": 172, "{'name': 'buildSettlement', 'v': 39}": 173, "{'name': 'buildSettlement', 'v': 40}": 174, "{'name': 'buildSettlement', 'v': 41}": 175, "{'name': 'buildSettlement', 'v': 42}": 176, "{'name': 'buildSettlement', 'v': 43}": 177, "{'name': 'buildSettlement', 'v': 44}": 178, "{'name': 'buildSettlement', 'v': 45}": 179, "{'name': 'buildSettlement', 'v': 46}": 180, "{'name': 'buildSettlement', 'v': 47}": 181, "{'name': 'buildSettlement', 'v': 48}": 182, "{'name': 'buildSettlement', 'v': 49}": 183, "{'name': 'buildSettlement', 'v': 50}": 184, "{'name': 'buildSettlement', 'v': 51}": 185, "{'name': 'buildSettlement', 'v': 52}": 186, "{'name': 'buildSettlement', 'v': 53}": 187, "{'name': 'buildCity', 'v': 0}": 188, "{'name': 'buildCity', 'v': 1}": 189, "{'name': 'buildCity', 'v': 2}": 190, "{'name': 'buildCity', 'v': 3}": 191, "{'name': 'buildCity', 'v': 4}": 192, "{'name': 'buildCity', 'v': 5}": 193, "{'name': 'buildCity', 'v': 6}": 194, "{'name': 'buildCity', 'v': 7}": 195, "{'name': 'buildCity', 'v': 8}": 196, "{'name': 'buildCity', 'v': 9}": 197, "{'name': 'buildCity', 'v': 10}": 198, "{'name': 'buildCity', 'v': 11}": 199, "{'name': 'buildCity', 'v': 12}": 200, "{'name': 'buildCity', 'v': 13}": 201, "{'name': 'buildCity', 'v': 14}": 202, "{'name': 'buildCity', 'v': 15}": 203, "{'name': 'buildCity', 'v': 16}": 204, "{'name': 'buildCity', 'v': 17}": 205, "{'name': 'buildCity', 'v': 18}": 206, "{'name': 'buildCity', 'v': 19}": 207, "{'name': 'buildCity', 'v': 20}": 208, "{'name': 'buildCity', 'v': 21}": 209, "{'name': 'buildCity', 'v': 22}": 210, "{'name': 'buildCity', 'v': 23}": 211, "{'name': 'buildCity', 'v': 24}": 212, "{'name': 'buildCity', 'v': 25}": 213, "{'name': 'buildCity', 'v': 26}": 214, "{'name': 'buildCity', 'v': 27}": 215, "{'name': 'buildCity', 'v': 28}": 216, "{'name': 'buildCity', 'v': 29}": 217, "{'name': 'buildCity', 'v': 30}": 218, "{'name': 'buildCity', 'v': 31}": 219, "{'name': 'buildCity', 'v': 32}": 220, "{'name': 'buildCity', 'v': 33}": 221, "{'name': 'buildCity', 'v': 34}": 222, "{'name': 'buildCity', 'v': 35}": 223, "{'name': 'buildCity', 'v': 36}": 224, "{'name': 'buildCity', 'v': 37}": 225, "{'name': 'buildCity', 'v': 38}": 226, "{'name': 'buildCity', 'v': 39}": 227, "{'name': 'buildCity', 'v': 40}": 228, "{'name': 'buildCity', 'v': 41}": 229, "{'name': 'buildCity', 'v': 42}": 230, "{'name': 'buildCity', 'v': 43}": 231, "{'name': 'buildCity', 'v': 44}": 232, "{'name': 'buildCity', 'v': 45}": 233, "{'name': 'buildCity', 'v': 46}": 234, "{'name': 'buildCity', 'v': 47}": 235, "{'name': 'buildCity', 'v': 48}": 236, "{'name': 'buildCity', 'v': 49}": 237, "{'name': 'buildCity', 'v': 50}": 238, "{'name': 'buildCity', 'v': 51}": 239, "{'name': 'buildCity', 'v': 52}": 240, "{'name': 'buildCity', 'v': 53}": 241, "{'name': 'buildRoad', 'v1': 0, 'v2': 1}": 242, "{'name': 'buildRoad', 'v1': 0, 'v2': 5}": 243, "{'name': 'buildRoad', 'v1': 0, 'v2': 12}": 244, "{'name': 'buildRoad', 'v1': 1, 'v2': 2}": 245, "{'name': 'buildRoad', 'v1': 1, 'v2': 6}": 246, "{'name': 'buildRoad', 'v1': 2, 'v2': 3}": 247, "{'name': 'buildRoad', 'v1': 2, 'v2': 9}": 248, "{'name': 'buildRoad', 'v1': 3, 'v2': 4}": 249, "{'name': 'buildRoad', 'v1': 3, 'v2': 19}": 250, "{'name': 'buildRoad', 'v1': 4, 'v2': 5}": 251, "{'name': 'buildRoad', 'v1': 4, 'v2': 16}": 252, "{'name': 'buildRoad', 'v1': 5, 'v2': 14}": 253, "{'name': 'buildRoad', 'v1': 6, 'v2': 7}": 254, "{'name': 'buildRoad', 'v1': 6, 'v2': 11}": 255, "{'name': 'buildRoad', 'v1': 7, 'v2': 8}": 256, "{'name': 'buildRoad', 'v1': 7, 'v2': 24}": 257, "{'name': 'buildRoad', 'v1': 8, 'v2': 9}": 258, "{'name': 'buildRoad', 'v1': 8, 'v2': 27}": 259, "{'name': 'buildRoad', 'v1': 9, 'v2': 22}": 260, "{'name': 'buildRoad', 'v1': 10, 'v2': 11}": 261, "{'name': 'buildRoad', 'v1': 10, 'v2': 12}": 262, "{'name': 'buildRoad', 'v1': 10, 'v2': 32}": 263, "{'name': 'buildRoad', 'v1': 11, 'v2': 28}": 264, "{'name': 'buildRoad', 'v1': 12, 'v2': 13}": 265, "{'name': 'buildRoad', 'v1': 13, 'v2': 15}": 266, "{'name': 'buildRoad', 'v1': 13, 'v2': 34}": 267, "{'name': 'buildRoad', 'v1': 14, 'v2': 15}": 268, "{'name': 'buildRoad', 'v1': 14, 'v2': 18}": 269, "{'name': 'buildRoad', 'v1': 15, 'v2': 36}": 270, "{'name': 'buildRoad', 'v1': 16, 'v2': 17}": 271, "{'name': 'buildRoad', 'v1': 16, 'v2': 21}": 272, "{'name': 'buildRoad', 'v1': 17, 'v2': 18}": 273, "{'name': 'buildRoad', 'v1': 17, 'v2': 40}": 274, "{'name': 'buildRoad', 'v1': 18, 'v2': 38}": 275, "{'name': 'buildRoad', 'v1': 19, 'v2': 20}": 276, "{'name': 'buildRoad', 'v1': 19, 'v2': 23}": 277, "{'name': 'buildRoad', 'v1': 20, 'v2': 21}": 278, "{'name': 'buildRoad', 'v1': 20, 'v2': 45}": 279, "{'name': 'buildRoad', 'v1': 21, 'v2': 43}": 280, "{'name': 'buildRoad', 'v1': 22, 'v2': 23}": 281, "{'name': 'buildRoad', 'v1': 22, 'v2': 50}": 282, "{'name': 'buildRoad', 'v1': 23, 'v2': 48}": 283, "{'name': 'buildRoad', 'v1': 24, 'v2': 25}": 284, "{'name': 'buildRoad', 'v1': 24, 'v2': 29}": 285, "{'name': 'buildRoad', 'v1': 25, 'v2': 26}": 286, "{'name': 'buildRoad', 'v1': 26, 'v2': 27}": 287, "{'name': 'buildRoad', 'v1': 27, 'v2': 53}": 288, "{'name': 'buildRoad', 'v1': 28, 'v2': 29}": 289, "{'name': 'buildRoad', 'v1': 28, 'v2': 31}": 290, "{'name': 'buildRoad', 'v1': 30, 'v2': 31}": 291, "{'name': 'buildRoad', 'v1': 30, 'v2': 32}": 292, "{'name': 'buildRoad', 'v1': 32, 'v2': 33}": 293, "{'name': 'buildRoad', 'v1': 33, 'v2': 34}": 294, "{'name': 'buildRoad', 'v1': 34, 'v2': 35}": 295, "{'name': 'buildRoad', 'v1': 35, 'v2': 37}": 296, "{'name': 'buildRoad', 'v1': 36, 'v2': 37}": 297, "{'name': 'buildRoad', 'v1': 36, 'v2': 39}": 298, "{'name': 'buildRoad', 'v1': 38, 'v2': 39}": 299, "{'name': 'buildRoad', 'v1': 38, 'v2': 42}": 300, "{'name': 'buildRoad', 'v1': 40, 'v2': 41}": 301, "{'name': 'buildRoad', 'v1': 40, 'v2': 44}": 302, "{'name': 'buildRoad', 'v1': 41, 'v2': 42}": 303, "{'name': 'buildRoad', 'v1': 43, 'v2': 44}": 304, "{'name': 'buildRoad', 'v1': 43, 'v2': 47}": 305, "{'name': 'buildRoad', 'v1': 45, 'v2': 46}": 306, "{'name': 'buildRoad', 'v1': 45, 'v2': 49}": 307, "{'name': 'buildRoad', 'v1': 46, 'v2': 47}": 308, "{'name': 'buildRoad', 'v1': 48, 'v2': 49}": 309, "{'name': 'buildRoad', 'v1': 48, 'v2': 52}": 310, "{'name': 'buildRoad', 'v1': 50, 'v2': 51}": 311, "{'name': 'buildRoad', 'v1': 50, 'v2': 53}": 312, "{'name': 'buildRoad', 'v1': 51, 'v2': 52}": 313}

#action番号→actionInfo 0~1038
def actionController(action):
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 

    if action == 0:
        return {"name":"rollDice"}    
    elif action == 1:
        return {"name":"endTurn"}
    elif 2 <= action <= 71:
        combis =list(itertools.combinations_with_replacement(resourceName, 4))
        saveResources = {'ORE':0, 'BRICK':0, 'WHEAT':0, 'WOOD':0, 'SHEEP':0}
        for resource in combis[action-2]:
            saveResources[resource] += 1
        return {"name":"discard","saveResources":saveResources}
    elif 72 <= action <= 91:
        combis = list(itertools.permutations(resourceName, 2))
        return {"name":"bankTrade","buyResource":combis[action-72][0],"sellResource":combis[action-72][1]}
    elif action == 92:
        return {"name":"buyDevCard"}
    elif action == 93:
        return {"name":"useKnight"}
    elif action == 94:
        return {"name":"useRoadBuilder"}
    elif 95 <= action <= 109:
        combis = list(itertools.combinations_with_replacement(resourceName,2))
        getResources = {'ORE':0, 'BRICK':0, 'WHEAT':0, 'WOOD':0, 'SHEEP':0}
        for resource in combis[action-95]:
            getResources[resource] += 1
        return {"name":"useYear","getResources":getResources}
    elif 110 <= action <= 114:
        return {"name":"useMonopoly","resource":resourceName[action-110]}
    
    #CNNのサイズ 縦0~10の11　横0~20の21 11*21 = 231
    #divmodで商と余を取れば、flattenを戻せる
    elif 115 <= action <= 345:
        y,x = divmod(action-115,21)
        if (y,x) in cnnyxToHveIndex:
          hve , *idx = cnnyxToHveIndex[(y,x)]
          if hve == "h":
              return {"name":"moveThief","hexIndex":idx[0]}
        return {"name":"illegal"}
    
    elif 346 <= action <= 576:
        y,x = divmod(action-346,21)
        if (y,x) in cnnyxToHveIndex:
            hve, *idx = cnnyxToHveIndex[(y,x)]
            if hve == "e":
                return {"name":"buildRoad","v1":idx[0],"v2":idx[1]}
        return {"name":"illegal"}
    
    elif 577 <= action <= 807:
        y,x = divmod(action-577,21)
        if (y,x) in cnnyxToHveIndex:
            hve, *idx = cnnyxToHveIndex[(y,x)]
            if hve == "v":
                return {"name":"buildSettlement","v":idx[0]}
        return {"name":"illegal"}  
    
    elif 808 <= action <= 1038:
        y,x = divmod(action-808,21)
        if (y,x) in cnnyxToHveIndex:
            hve, *idx = cnnyxToHveIndex[(y,x)]
            if hve == "v":
                return {"name":"buildCity","v":idx[0]}
        return {"name":"illegal"}  
    


#action番号→actionInfo graphネット仕様 0~313
def actionControllerGraph(action):
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 

    if action == 0:
        return {"name":"rollDice"}    
    elif action == 1:
        return {"name":"endTurn"}
    elif 2 <= action <= 71:
        combis =list(itertools.combinations_with_replacement(resourceName, 4))
        saveResources = {'ORE':0, 'BRICK':0, 'WHEAT':0, 'WOOD':0, 'SHEEP':0}
        for resource in combis[action-2]:
            saveResources[resource] += 1
        return {"name":"discard","saveResources":saveResources}
    elif 72 <= action <= 91:
        combis = list(itertools.permutations(resourceName, 2))
        return {"name":"bankTrade","buyResource":combis[action-72][0],"sellResource":combis[action-72][1]}
    elif action == 92:
        return {"name":"buyDevCard"}
    elif action == 93:
        return {"name":"useKnight"}
    elif action == 94:
        return {"name":"useRoadBuilder"}
    elif 95 <= action <= 109:
        combis = list(itertools.combinations_with_replacement(resourceName,2))
        getResources = {'ORE':0, 'BRICK':0, 'WHEAT':0, 'WOOD':0, 'SHEEP':0}
        for resource in combis[action-95]:
            getResources[resource] += 1
        return {"name":"useYear","getResources":getResources}
    elif 110 <= action <= 114:
        return {"name":"useMonopoly","resource":resourceName[action-110]}
    
    elif 115 <= action <= 133:
        return {"name":"moveThief","hexIndex":action-115}
        
    elif 134 <= action <= 187:
        return {"name":"buildSettlement","v":action-134}
 
    elif 188 <= action <= 241:
        return {"name":"buildCity","v":action-188}
    
    elif 242 <= action <= 313:
        for k,v in vertex_index_to_edge_index.items():
            if v==action-242:
                v1,v2 = k
                break
        return {"name":"buildRoad","v1":v1,"v2":v2}


    
#0 rollDice
#1 endTurn
#2~71 discard
#72~91 bankTrade
#92 buyDevCard
#93,94 useKnight,useRoadBuilder
#95~109 useYear
#110~114 useMonopoly
#115~345 moveThief
#346~576 buildRoad
#577~807 buildSettlement
#808~1038 buildCity
import numpy as np

#合法手は1、非合法は0のマスク
def getLegalMask(env):
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 
    legalMask = [False]*1039
    phase,hasRoled,hasDevCardPlayed = env.phase,env.hasRoled,env.hasDevCardPlayed
    player,board = env.nowPlayer,env.board
    resources = player.resources
    devCards = player.devCards
    #rolldice
    if phase == Phase.normal and not hasRoled:
        legalMask[0] = True
    #endTruen
    if phase == Phase.normal and hasRoled:
        legalMask[1] = True
    #discard
    if phase == Phase.discard:
        for action in range(2,72):
            saveResources = actionController(action)["saveResources"]
            ok = True
            for r in resourceName:
                if saveResources[r] > resources[r]:
                    ok = False
            if ok:
                legalMask[action] = True
    #bankTrade
    if phase == Phase.normal and hasRoled:
        for action in range(72,92):
            actionInfo = actionController(action)
            sellResource,buyResource = actionInfo["sellResource"],actionInfo["buyResource"]
            if checkLegalBankTrade(player,sellResource,buyResource):
                legalMask[action] = True
    #buyDevCard
    if phase == Phase.normal and hasRoled and sum(board.devCardStack.values())>0:
        if(resources['WHEAT'] > 0 and resources['ORE'] > 0 and resources['SHEEP'] > 0):
            legalMask[92] = True

    #93,94 useKnight,useRoadBuilder
    if phase == Phase.normal and devCards["KNIGHT"]>0 and not hasDevCardPlayed:
        legalMask[93] = True
    if phase == Phase.normal and devCards["ROADBUILDER"]>0 and player.roadsLeft>=2 and not hasDevCardPlayed:
        potential_roads = board.get_potential_roads(player)
        if len(potential_roads)>0: #全く建てられるものがないなら、街道建設は使えない
          legalMask[94] = True
    if phase == Phase.normal and devCards["YEAROFPLENTY"]>0 and not hasDevCardPlayed:
        for action in range(95,110):
            legalMask[action] = True

    if phase == Phase.normal and devCards["MONOPOLY"]>0 and not hasDevCardPlayed:
        for i in range(110,115):
            legalMask[i] = True

    if phase == Phase.firstInitialRoad or phase == Phase.secondInitialRoad:
        setup_roads = board.get_setup_roads(player)
    elif phase == Phase.firstInitialSettlement or phase == Phase.secondInitialSettlement:
        setup_settlements =  board.get_setup_settlements(player)
    elif phase == Phase.normal:
        potential_roads = board.get_potential_roads(player)
        potential_settlements = board.get_potential_settlements(player)
        potential_cities = board.get_potential_cities(player)
    elif phase == Phase.roadBuilderFirst or phase == Phase.roadBuilderSecond:
        potential_roads = board.get_potential_roads(player)
    elif phase == Phase.moveThief:
        pass
    else:
        return legalMask

    for yx,hveIndex in cnnyxToHveIndex.items():
        y,x = yx
        
        if hveIndex[0]=="h":
            hexIndex = hveIndex[1]
            if phase == Phase.moveThief and not board.hexTileDict[hexIndex].robber:
                legalMask[115 + y*21+x] = True

        elif hveIndex[0]=="e" and player.roadsLeft>0:
            v1,v2 = hveIndex[1],hveIndex[2]
            v1Coord = board.vertex_index_to_pixel_dict[v1]
            v2Coord = board.vertex_index_to_pixel_dict[v2]

            if phase == Phase.normal and resources["BRICK"]>0 and resources["WOOD"]>0 and hasRoled:
                 if (v1Coord,v2Coord) in potential_roads or (v2Coord,v1Coord) in potential_roads:
                    legalMask[346 + y*21+x] = True
            elif phase == Phase.roadBuilderFirst or phase == Phase.roadBuilderSecond:
                if (v1Coord,v2Coord) in potential_roads or (v2Coord,v1Coord) in potential_roads:
                    legalMask[346 + y*21+x] = True
            elif phase == Phase.firstInitialRoad or phase == Phase.secondInitialRoad:
                 if (v1Coord,v2Coord) in setup_roads or (v2Coord,v1Coord) in setup_roads:
                     legalMask[346 + y*21+x] = True

        #CNNのサイズ 縦0~10の11　横0~20の21 11*21 = 231
        elif hveIndex[0]=="v":
            v = hveIndex[1]
            vCoord = board.vertex_index_to_pixel_dict[v]

            if phase == Phase.normal and hasRoled:
                if(resources['BRICK']>0 and resources['WOOD']>0 and resources['SHEEP']>0 and resources['WHEAT']>0):
                    if player.settlementsLeft > 0 and vCoord in potential_settlements:
                        legalMask[577 + y*21+x] = True
                if (resources['WHEAT'] >= 2 and resources['ORE'] >= 3):
                    if player.citiesLeft > 0 and vCoord in potential_cities:
                        legalMask[808 + y*21+x] = True

            elif phase == Phase.firstInitialSettlement or phase == Phase.secondInitialSettlement:
                if vCoord in setup_settlements:
                    legalMask[577 + y*21+x] = True

    return legalMask

#合法手のマスク、グラフネットワーク用 
def getLegalMaskGraph(env):
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 
    legalMask = [False]*(115+19+54*2+72) #314
    phase,hasRoled,hasDevCardPlayed = env.phase,env.hasRoled,env.hasDevCardPlayed
    player,board = env.nowPlayer,env.board
    resources = player.resources
    devCards = player.devCards
    #rolldice
    if phase == Phase.normal and not hasRoled:
        legalMask[0] = True
    #endTruen
    if phase == Phase.normal and hasRoled:
        legalMask[1] = True
    #discard
    if phase == Phase.discard:
        for action in range(2,72):
            saveResources = actionController(action)["saveResources"]
            ok = True
            for r in resourceName:
                if saveResources[r] > resources[r]:
                    ok = False
            if ok:
                legalMask[action] = True
    #bankTrade
    if phase == Phase.normal and hasRoled:
        for action in range(72,92):
            actionInfo = actionController(action)
            sellResource,buyResource = actionInfo["sellResource"],actionInfo["buyResource"]
            if checkLegalBankTrade(player,sellResource,buyResource):
                legalMask[action] = True
    #buyDevCard
    if phase == Phase.normal and hasRoled and sum(board.devCardStack.values())>0:
        if(resources['WHEAT'] > 0 and resources['ORE'] > 0 and resources['SHEEP'] > 0):
            legalMask[92] = True

    #93,94 useKnight,useRoadBuilder
    if phase == Phase.normal and devCards["KNIGHT"]>0 and not hasDevCardPlayed:
        legalMask[93] = True
    if phase == Phase.normal and devCards["ROADBUILDER"]>0 and player.roadsLeft>=2 and not hasDevCardPlayed:
        potential_roads = board.get_potential_roads(player)
        if len(potential_roads)>0: #全く建てられるものがないなら、街道建設は使えない
          legalMask[94] = True
    #シュウカク [95,110)
    if phase == Phase.normal and devCards["YEAROFPLENTY"]>0 and not hasDevCardPlayed:
        for action in range(95,110):
            legalMask[action] = True
    #独占　[110,115)
    if phase == Phase.normal and devCards["MONOPOLY"]>0 and not hasDevCardPlayed:
        for i in range(110,115):
            legalMask[i] = True

    if phase == Phase.firstInitialRoad or phase == Phase.secondInitialRoad:
        setup_roads = board.get_setup_roads(player)
    elif phase == Phase.firstInitialSettlement or phase == Phase.secondInitialSettlement:
        setup_settlements =  board.get_setup_settlements(player)
    elif phase == Phase.normal:
        potential_roads = board.get_potential_roads(player)
        potential_settlements = board.get_potential_settlements(player)
        potential_cities = board.get_potential_cities(player)
    elif phase == Phase.roadBuilderFirst or phase == Phase.roadBuilderSecond:
        potential_roads = board.get_potential_roads(player)
    elif phase == Phase.moveThief:
        pass
    else:
        return legalMask
    
    for hexIndex in range(19):
        if phase == Phase.moveThief and not board.hexTileDict[hexIndex].robber:
            legalMask[115+hexIndex] = True
    for vertexIndex in range(54):
        vCoord = board.vertex_index_to_pixel_dict[vertexIndex]
        if phase == Phase.normal and hasRoled:
            if(resources['BRICK']>0 and resources['WOOD']>0 and resources['SHEEP']>0 and resources['WHEAT']>0):
                if player.settlementsLeft > 0 and vCoord in potential_settlements:
                    legalMask[134+vertexIndex] = True
            if (resources['WHEAT'] >= 2 and resources['ORE'] >= 3):
                if player.citiesLeft > 0 and vCoord in potential_cities:
                    legalMask[188+vertexIndex] = True
        elif phase == Phase.firstInitialSettlement or phase == Phase.secondInitialSettlement:
            if vCoord in setup_settlements:
                legalMask[134+vertexIndex] = True

    if player.roadsLeft>0:
        for roadIndex in range(72):
            for k,v in vertex_index_to_edge_index.items():
                if v==roadIndex:
                    v1,v2 = k
                    break
            v1Coord = board.vertex_index_to_pixel_dict[v1]
            v2Coord = board.vertex_index_to_pixel_dict[v2]
            if phase == Phase.normal and resources["BRICK"]>0 and resources["WOOD"]>0 and hasRoled:
                if (v1Coord,v2Coord) in potential_roads or (v2Coord,v1Coord) in potential_roads:
                    legalMask[242+roadIndex] = True
            elif phase == Phase.roadBuilderFirst or phase == Phase.roadBuilderSecond:
                if (v1Coord,v2Coord) in potential_roads or (v2Coord,v1Coord) in potential_roads:
                    legalMask[242+roadIndex] = True
            elif phase == Phase.firstInitialRoad or phase == Phase.secondInitialRoad:
                if (v1Coord,v2Coord) in setup_roads or (v2Coord,v1Coord) in setup_roads:
                    legalMask[242+roadIndex] = True
    return legalMask

def checkLegalBankTrade(player,r1,r2):
    if r1==r2:
        return False
    r1_port = "2:1 " + r1
    if(r1_port in player.portList and player.resources[r1] >= 2): #Can use 2:1 port with r1
        return True
    elif('3:1 PORT' in player.portList and player.resources[r1] >= 3):
        return True
    elif(player.resources[r1] >= 4):
        return True
    else:
        return False


def getVectorFeature(env):
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 
    portName = ['3:1 PORT','2:1 ORE','2:1 BRICK','2:1 WHEAT','2:1 WOOD','2:1 SHEEP']
    devCardName =  ['KNIGHT', 'VP', 'MONOPOLY', 'ROADBUILDER', 'YEAROFPLENTY']
    VectorFeature = []
    nowPlayer,anotherPlayer = env.nowPlayer,env.anotherPlayer

    #どのPhaseか + サイコロ振ったか　+ 発展カード使ったか
    phaseFeature = [0]*9
    phaseFeature[env.phase.value-1] = 1
    if env.hasRoled:
        phaseFeature.append(1)
    else:
        phaseFeature.append(0)
    if env.hasDevCardPlayed:
        phaseFeature.append(1)
    else:
        phaseFeature.append(0)

    nowPlayerFeature = []
    anotherPlayerFeature = []

    #資源数(自分は種類ごと、相手は合計だけ)
    for key,value in nowPlayer.resources.items():
        nowPlayerFeature.append(value/10) #正規化 
    anotherPlayerFeature.append(sum(anotherPlayer.resources.values())/20) #正規化

    #残り建物数
    nowPlayerFeature += [nowPlayer.settlementsLeft/5,nowPlayer.roadsLeft/15,nowPlayer.citiesLeft/4] #正規化
    anotherPlayerFeature +=  [anotherPlayer.settlementsLeft/5,anotherPlayer.roadsLeft/15,anotherPlayer.citiesLeft/4] #正規化
    
    #騎士サイズ
    nowPlayerFeature.append(nowPlayer.knightsPlayed/15) #正規化
    anotherPlayerFeature.append(anotherPlayer.knightsPlayed/15) #正規化
    
    #港アクセス
    nowPlayerPortFeature = [0]*6
    anotherPlayerPortFeature = [0]*6
    for i in range(6):
        if portName[i] in nowPlayer.portList:
            nowPlayerPortFeature[i] = 1
        if portName[i] in anotherPlayer.portList:
            anotherPlayerPortFeature[i] = 1
        
    nowPlayerFeature += nowPlayerPortFeature
    anotherPlayerFeature += anotherPlayerPortFeature
    
    #自分の発展カード(使用可とこのターン使えるやつで分ける)
    devCardName =  ['KNIGHT', 'VP', 'MONOPOLY', 'ROADBUILDER', 'YEAROFPLENTY']
    for d in devCardName:
        if d=="KNIGHT":
            nowPlayerFeature.append(nowPlayer.devCards[d]/15)
        elif d=="VP":
            nowPlayerFeature.append(nowPlayer.devCards[d]/5)
        else:
            nowPlayerFeature.append(nowPlayer.devCards[d]/2)

    for d in devCardName:
        if d=="KNIGHT":
            nowPlayerFeature.append(nowPlayer.newDevCards.count(d)/15)
        elif d=="VP":
            pass
        else:
            nowPlayerFeature.append(nowPlayer.newDevCards.count(d)/2)


    #相手の発展カード(伏せられてる合計数)
    anotherPlayerFeature.append(anotherPlayer.backDevCards/26) #正規化

    #最大騎士力と最長交易路
    if nowPlayer.largestArmyFlag:
        nowPlayerFeature.append(1)
    else:
        nowPlayerFeature.append(0)
    if nowPlayer.longestRoadFlag:
        nowPlayerFeature.append(1)
    else:
        nowPlayerFeature.append(0)
    if anotherPlayer.largestArmyFlag:
        anotherPlayerFeature.append(1)
    else:
        anotherPlayerFeature.append(0)
    if anotherPlayer.longestRoadFlag:
        anotherPlayerFeature.append(1)
    else:
        anotherPlayerFeature.append(0)

    #VP
    nowPlayerFeature.append(nowPlayer.victoryPoints/10) #正規化
    anotherPlayerFeature.append(anotherPlayer.victoryPoints/10)

    VectorFeature = phaseFeature + nowPlayerFeature + anotherPlayerFeature

    return np.array(VectorFeature,dtype=np.float32)

def getBoardCNNFeature(env):
    board,nowPlayer,anotherPlayer = env.board,env.nowPlayer,env.anotherPlayer
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 
    portName = ['3:1 PORT','2:1 ORE','2:1 BRICK','2:1 WHEAT','2:1 WOOD','2:1 SHEEP']
    numToExpectation = {2:1, 3:2, 4:3, 5:4, 6:5, 8:5, 9:4, 10:3, 11:2, 12:1, None:0}
    #CNNのサイズ 縦0~10の11　横0~20の21 11*21 = 231
    boardCNNFeature = [[[0]*21 for _ in range(11)]for _ in range(24)]
    
    
    for cnnyx,hveIndex in cnnyxToHveIndex.items():
        y,x = cnnyx
        if hveIndex[0] == "h":
            hexIndex = hveIndex[1]
            hexObject = board.hexTileDict[hexIndex]
            #0砂漠マスかどうか
            if hexObject.resource.type == "DESERT":
                boardCNNFeature[0][y][x] = 1
            else: #1~5各リソースの期待値
                resourceType = hexObject.resource.type
                numToExpectation = {2:1, 3:2, 4:3, 5:4, 6:5, 8:5, 9:4, 10:3, 11:2, 12:1, None:0}
                expectation = numToExpectation[hexObject.resource.num]
                boardCNNFeature[resourceName.index(resourceType)+1][y][x] = expectation/5 #正規化のため割る5
            if hexObject.robber: #6盗賊いるか
                boardCNNFeature[6][y][x] = 1

        elif hveIndex[0] == "e":
            v1,v2 = hveIndex[1],hveIndex[2]
            v1Coord = board.vertex_index_to_pixel_dict[v1]
            v2Coord = board.vertex_index_to_pixel_dict[v2]
            vertexObject = board.boardGraph[v1Coord]
            edge_i = vertexObject.edgeList.index(v2Coord)
            #7自分の道　8相手の道
            if vertexObject.edgeState[edge_i][0] == nowPlayer:
                boardCNNFeature[7][y][x] = 1
            elif vertexObject.edgeState[edge_i][0] == anotherPlayer:
                boardCNNFeature[8][y][x] = 1

        elif hveIndex[0] == "v":
            v = hveIndex[1]
            vCoord = board.vertex_index_to_pixel_dict[v]
            vertexObject = board.boardGraph[vCoord]
            #9,10,11,12,13,14 港
            if vertexObject.port in portName:
                boardCNNFeature[ portName.index(vertexObject.port) +9][y][x] = 1
            #15,16自分の開拓地、相手の開拓地
            if vertexObject.state["Settlement"]:
                if vertexObject.state["Player"] == nowPlayer:
                    boardCNNFeature[15][y][x]=1
                elif vertexObject.state["Player"] == anotherPlayer:
                    boardCNNFeature[16][y][x]=1
            #17,18自分の都市、相手の都市
            if vertexObject.state["City"]:
                if vertexObject.state["Player"] == nowPlayer:
                    boardCNNFeature[17][y][x]=1
                elif vertexObject.state["Player"] == anotherPlayer:
                    boardCNNFeature[18][y][x]=1

            #19~23生産期待値
            for adjacentHexIndex in board.boardGraph[vCoord].adjacentHexList:
                resourceType = board.hexTileDict[adjacentHexIndex].resource.type
                resourceNum = board.hexTileDict[adjacentHexIndex].resource.num
                if resourceType != "DESERT":
                    boardCNNFeature[ resourceName.index(resourceType) + 19 ][y][x]  += numToExpectation[resourceNum]/7 #正規化のため割る7
                
    return np.array(boardCNNFeature,dtype=np.float32)
    

def getGraphFeature(catan):
    resourceName = ['ORE','BRICK','WHEAT','WOOD','SHEEP'] 
    portName = ['3:1 PORT','2:1 ORE','2:1 BRICK','2:1 WHEAT','2:1 WOOD','2:1 SHEEP']
    diceRoll_expectation = {2:1, 3:2, 4:3, 5:4, 6:5, 8:5, 9:4, 10:3, 11:2, 12:1, None:0}

    #vertexIndex 0~53    自分開拓地、自分都市,相手開拓地、相手とし、港情報,資源期待値
    vertexTileFeature = [[0]*(4+6+5) for _ in range(54)]
    #roadIndex 0~71 
    roadTileFeature = [[0]*2 for _ in range(72)]
    #hexIndex 0~18
    hexTileFeature = [[0]*6 for _ in range(19)]

    board = catan.board
    nowPlayer,anotherPlayer = catan.nowPlayer,catan.anotherPlayer

    #六角形の特徴
    for hexIndex in range(19):
        hexTile = board.hexTileDict[hexIndex]
        #生産期待値
        resourceType = hexTile.resource.type
        numToExpectation = {2:1, 3:2, 4:3, 5:4, 6:5, 8:5, 9:4, 10:3, 11:2, 12:1, None:0}
        expectation = numToExpectation[hexTile.resource.num]
        if resourceType != 'DESERT':
            hexTileFeature[hexIndex][resourceName.index(resourceType)] = expectation/5 #正規化
        if hexTile.robber:
            hexTileFeature[hexIndex][5] = 1

    #交差路の特徴
    for vIndex in range(54):
        vCoord = board.vertex_index_to_pixel_dict[vIndex]
        v = board.boardGraph[vCoord]

        #開拓地と都市
        if v.state["Player"] == nowPlayer:
            if v.state['Settlement']:
                vertexTileFeature[vIndex][0] = 1
            elif v.state['City']:
                vertexTileFeature[vIndex][1] = 1
        if v.state["Player"] == anotherPlayer:
            if v.state['Settlement']:
                vertexTileFeature[vIndex][2] = 1
            elif v.state['City']:
                vertexTileFeature[vIndex][3] = 1

        #港    
        if v.port in portName:
                vertexTileFeature[vIndex][portName.index(v.port)+4] = 1

        #生産期待値
        for adjacentHexIndex in board.boardGraph[vCoord].adjacentHexList:
            resourceType = board.hexTileDict[adjacentHexIndex].resource.type
            resourceNum = board.hexTileDict[adjacentHexIndex].resource.num
            if resourceType != "DESERT":
                vertexTileFeature[vIndex][ resourceName.index(resourceType) + 10 ]  += diceRoll_expectation[resourceNum]/7

        #街道の情報　2回書き込まれるが気にしない
        for i in range(len(v.edgeList)):
            uCoord = v.edgeList[i]
            u = board.boardGraph[uCoord]
            uIndex = u.vertexIndex
            roadIndex = vertex_index_to_edge_index[(vIndex,uIndex)]
   
            if v.edgeState[i][0] == nowPlayer:
                roadTileFeature[roadIndex][0] = 1
            elif v.edgeState[i][0] == anotherPlayer:
                roadTileFeature[roadIndex][1] = 1

    return np.array(hexTileFeature,dtype=np.float32), np.array(vertexTileFeature,dtype=np.float32), np.array(roadTileFeature,dtype=np.float32)


    



        



    

if __name__ == "__main__":
   

    catan = Catan(viewMode=False,debugLog=False,fixed=True)
    board = catan.board
    
   
    catan = Catan(viewMode=False,debugLog=False,fixed=True)
    board = catan.board
    src = []
    dist = []
    vertex_index_to_edge_index = {}
    temp = 0 
    print("start")
    #edgeTileに連番を振っていく
    for vindex in range(54):
        vCoord = board.vertex_index_to_pixel_dict[vindex]
        v = board.boardGraph[vCoord]
        for uCoord in v.edgeList:
            uindex = board.boardGraph[uCoord].vertexIndex
            aindex,bindex = min(uindex,vindex),max(uindex,vindex)
            if (aindex,bindex) not in vertex_index_to_edge_index:
              vertex_index_to_edge_index[(aindex,bindex) ] = temp
              temp += 1
    new_vertex_index_to_edge_index = {}
    for k,v in vertex_index_to_edge_index.items():
        a,b = k
        new_vertex_index_to_edge_index[(a,b)] = v
        new_vertex_index_to_edge_index[(b,a)] = v

    vertex_index_to_edge_index = new_vertex_index_to_edge_index


    #srcとdstも一定なので作っちゃおう
    srcdst_hextile_to_vertextile = [[],[]] #資源から交差路
    srcdst_vertextile_to_hextile = [[],[]] #交差路から資源
    srcdst_roadtile_to_vertextile = [[],[]] #交差路から街道
    srcdst_vertextile_to_roadtile = [[],[]] #街道から交差路

    srcdst_vertextile_to_vertextile = [[],[]] #交差路から交差路
    srcdst_roadtile_to_roadtile = [[],[]] #街道から街道
    

    for vIndex in range(54):
        vCoord = board.vertex_index_to_pixel_dict[vIndex]
        v = board.boardGraph[vCoord]
        #交差路と六角形をつなぐ
        for hexIndex in v.adjacentHexList:
            srcdst_hextile_to_vertextile[0].append(hexIndex)
            srcdst_hextile_to_vertextile[1].append(vIndex)
            srcdst_vertextile_to_hextile[0].append(vIndex)
            srcdst_vertextile_to_hextile[1].append(hexIndex)

        #交差路と辺をつなぐ
        for i in range(len(v.edgeList)):
            uCoord = v.edgeList[i]
            u = board.boardGraph[uCoord]
            uIndex = u.vertexIndex
            roadIndex = vertex_index_to_edge_index[(vIndex,uIndex)]
            srcdst_roadtile_to_vertextile[0].append(roadIndex)
            srcdst_roadtile_to_vertextile[1].append(vIndex)
            srcdst_vertextile_to_roadtile[0].append(vIndex)
            srcdst_vertextile_to_roadtile[1].append(roadIndex)

            #交差路と交差路をつなぐ forループの中でvからuとuからvが登場するので両方向グラフになる
            srcdst_vertextile_to_vertextile[0].append(vIndex)
            srcdst_vertextile_to_vertextile[1].append(uIndex)


        #街道と街道をつなぐ　この交差路をまたぐ街道と街道
        for i in range(len(v.edgeList)):
            aCoord = v.edgeList[i]
            a = board.boardGraph[aCoord]
            aIndex = a.vertexIndex
            av_roadIndex = vertex_index_to_edge_index[(vIndex,aIndex)]
            for j in range(i+1,len(v.edgeList)):
                bCoord = v.edgeList[j]
                b = board.boardGraph[bCoord]
                bIndex = b.vertexIndex
                bv_roadIndex = vertex_index_to_edge_index[(vIndex,bIndex)]

                srcdst_roadtile_to_roadtile[0].append(av_roadIndex)
                srcdst_roadtile_to_roadtile[1].append(bv_roadIndex)

                srcdst_roadtile_to_roadtile[0].append(bv_roadIndex)
                srcdst_roadtile_to_roadtile[1].append(av_roadIndex)

                
    
    #print("hextile_to_vertextile =",repr(srcdst_hextile_to_vertextile))
    #print("vertextile_to_hextile =",repr(srcdst_vertextile_to_hextile))
    #print("roadtile_to_vertextile =",repr(srcdst_roadtile_to_vertextile))
    #print("vertextile_to_roadtile =",repr(srcdst_vertextile_to_roadtile))
    print("vertextile_ro_vertextile =",repr(srcdst_vertextile_to_vertextile))
    
    print("roadtile_to_roadtile =",repr(srcdst_roadtile_to_roadtile))

    
    #print(len(srcdst_hextile_to_vertextile[0]))
    #print(len(srcdst_vertextile_to_hextile[0]))
    #print(len(srcdst_roadtile_to_vertextile[0]))
    #print(len(srcdst_vertextile_to_roadtile[0]))
    #print(len(srcdst_vertextile_to_vertextile[0]))
    #print(len(srcdst_roadtile_to_roadtile[0]))
    #114,114,144,144,144,252

    
            
    



    

    

    """
    a = getEtenalLegalMask()
    print(a)

    boardCNNFeature = getBoardCNNFeature(catan)
    vectorFeature = getVectorFeature(catan)
    flattenFeature = getFlattenFeature(catan)

    print(boardCNNFeature.shape)
    print(vectorFeature.shape)
    print(flattenFeature.shape)

    cnnflatten = boardCNNFeature.flatten()
    print(cnnflatten.shape)

    cnndeflatten = cnnflatten.reshape(19,11,21)
    B = cnnflatten.reshape(19,21,11)

    print(np.array_equal(boardCNNFeature , cnndeflatten))
    print(np.array_equal(boardCNNFeature , B))
    """




